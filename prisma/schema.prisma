generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  createdAt    DateTime      @default(now()) @db.Timestamptz()
  updatedAt    DateTime      @updatedAt @db.Timestamptz()
  name         String
  email        String        @unique
  /// Provider가 LOCAL이 아닐 경우 null
  password     String?
  provider     Provider
  verified     Boolean       @default(false)
  verification Verification?
  dividends    Dividend[]
  Portfolios   Portfolio[]
  StockRecords StockRecord[]
}

model Verification {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  code      String   @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.Uuid
}

model Portfolio {
  id        String     @id @default(uuid()) @db.Uuid
  createdAt DateTime   @default(now()) @db.Timestamptz()
  updatedAt DateTime   @updatedAt @db.Timestamptz()
  name      String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @db.Uuid
  Dividend  Dividend[]
}

model Dividend {
  id          String     @id @default(uuid()) @db.Uuid
  createdAt   DateTime   @default(now()) @db.Timestamptz()
  updatedAt   DateTime   @updatedAt @db.Timestamptz()
  dividendAt  DateTime   @db.Timestamptz()
  name        String
  unit        Unit
  dividend    Float
  tax         Float
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String     @db.Uuid
  portfolio   Portfolio? @relation(fields: [portfolioId], references: [id])
  portfolioId String?    @db.Uuid
}

model StockRecord {
  id           String   @id @default(uuid()) @db.Uuid
  createdAt    DateTime @default(now()) @db.Timestamptz()
  updatedAt    DateTime @updatedAt @db.Timestamptz()
  recordAt     DateTime @db.Timestamptz()
  companyName  String
  quantity     Float
  unit         Unit
  buyPrice     Float
  currentPrice Float
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.Uuid
}

model Exchange {
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  date      String
  currency  Unit
  rate      Float

  @@id([date, currency])
}

enum Provider {
  LOCAL
  KAKAO
}

enum Unit {
  KRW
  USD
}
